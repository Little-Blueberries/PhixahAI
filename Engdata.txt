500 Python Questions

I. Basic Level (150 questions)

A. Overview & Installation (20 questions)

1. What is Python?
2. What are the main advantages of Python?
3. What are the disadvantages of Python?
4. In which fields is Python used?
5. What is the most popular current version of Python?
6. How to check the installed Python version?
7. What are the differences between Python 2 and Python 3?
8. What is the Python interpreter?
9. What is IDLE?
10. What is PIP?
11. How to install a package using PIP?
12. What is a virtual environment and why is it important?
13. How to create a virtual environment?
14. How to activate a virtual environment?
15. How to exit a virtual environment?
16. Is Python a compiled or interpreted language?
17. Explain Python's "cross-platform" concept.
18. Is Python open source?
19. Who created Python?
20. What year was Python created?

B. Basic Syntax (30 questions)
21. How to print a string to the screen in Python?
22. What is a variable in Python?
23. What are the rules for naming variables in Python?
24. What are the basic data types in Python? Name 5 types.
25. How to declare an integer in Python?
26. How to declare a float in Python?
27. How to declare a string in Python?
28. How to declare a boolean value (True/False) in Python?
29. How is assignment performed in Python?
30. What are arithmetic operators in Python? Name 5 operators.
31. What are comparison operators in Python? Name 3 operators.
32. What are logical operators in Python? Name 3 operators.
33. How to perform integer division in Python?
34. How to perform modulo division in Python?
35. What is the precedence order of operators in Python?
36. What is a comment in Python? How to create a comment?
37. Distinguish between single-line and multi-line comments.
38. What is the input() function used for in Python?
39. How to cast a string to an integer?
40. How to cast an integer to a string?
41. What are if, elif, else statements used for in Python?
42. Write a simple example using if-else.
43. What is the for loop used for in Python?
44. Write a simple example using a for loop to print numbers from 1 to 5.
45. What is the range() function used for in Python?
46. What is the while loop used for in Python?
47. Write a simple example using a while loop to print numbers from 1 to 3.
48. What is the break keyword used for in loops?
49. What is the continue keyword used for in loops?
50. What is the pass statement used for in Python?

C. Basic Data Structures (50 questions)
51. What is a List in Python?
52. Characteristics of List (ordered, mutable, allows duplicates)?
53. How to declare an empty List?
54. How to declare a List containing integers?
55. How to access an element in a List?
56. Distinguish between positive and negative indices in a List.
57. How to add an element to the end of a List? (append() function)
58. How to insert an element at a specific position in a List? (insert() function)
59. How to remove an element from a List by value? (remove() function)
60. How to remove an element from a List by index? (pop() function)
61. How to remove all elements from a List? (clear() function)
62. How to check if an element exists in a List?
63. What is a Tuple in Python?
64. Characteristics of Tuple (ordered, immutable, allows duplicates)?
65. How to declare an empty Tuple?
66. How to declare a Tuple containing strings?
67. How to access an element in a Tuple?
68. What is the main difference between List and Tuple?
69. When should you use Tuple instead of List?
70. What is a Set in Python?
71. Characteristics of Set (unordered, no duplicates, mutable)?
72. How to declare an empty Set?
73. How to declare a Set containing integers?
74. How to add an element to a Set? (add() function)
75. How to remove an element from a Set? (remove() or discard() function)
76. What is the difference between remove() and discard() when removing elements from a Set?
77. What are the basic set operations? Name 3 operations.
78. How to perform union between two Sets?
79. How to perform intersection between two Sets?
80. What is a Dictionary in Python?
81. Characteristics of Dictionary (unordered, mutable, stores key-value pairs)?
82. How to declare an empty Dictionary?
83. How to declare a Dictionary with some key-value pairs?
84. How to access a value by key in a Dictionary?
85. How to add a new key-value pair to a Dictionary?
86. How to update the value of a key in a Dictionary?
87. How to remove a key-value pair from a Dictionary? (del keyword or pop() function)
88. How to get all keys in a Dictionary? (keys() function)
89. How to get all values in a Dictionary? (values() function)
90. How to get all key-value pairs in a Dictionary? (items() function)
91. What is the len() function used for in Python?
92. How to make a shallow copy of a List?
93. How to make a deep copy of a List?
94. What is slicing in Python?
95. Example of slicing on a string.
96. Example of slicing on a List.
97. How to reverse a List?
98. How to sort a List in ascending order? (sort() function)
99. How to sort a List in descending order? (sort() with reverse parameter)
100. How to sort a List without changing the original List? (sorted() function)

D. Basic Functions (30 questions)
101. What is a function in Python?
102. Why should we use functions? (Code reuse, maintainability, clear structure)
103. What is the syntax for declaring a function in Python?
104. How to call a function?
105. What are parameters and arguments in a function?
106. What is the return value of a function?
107. What is the return keyword used for in a function?
108. Can a function return multiple values? If yes, how?
109. What is a default argument in a function?
110. Example of a function with a default argument.
111. What is a keyword argument in a function?
112. Example of calling a function using keyword arguments.
113. What is a positional argument in a function?
114. What is the scope of a variable in a function?
115. Distinguish between local and global variables.
116. What is the global keyword used for in Python?
117. What is a lambda (anonymous) function in Python?
118. What is the syntax of a lambda function?
119. When should you use a lambda function?
120. What is the map() function used for in Python?
121. Example of using map() with a lambda function.
122. What is the filter() function used for in Python?
123. Example of using filter() with a lambda function.
124. What is the reduce() function used for? (Need to import from functools)
125. Example of using reduce().
126. What is a docstring in Python?
127. How to add a docstring to a function?
128. What are the benefits of using docstrings?
129. What is a recursive function?
130. Example of a recursive function to calculate factorial.

E. Basic String Handling (20 questions)
131. What is a string in Python?
132. Are strings immutable?
133. How to create a multi-line string in Python?
134. How to concatenate two strings?
135. How to repeat a string?
136. What is the len() function for strings?
137. What does the upper() method of a string do?
138. What does the lower() method of a string do?
139. What does the capitalize() method of a string do?
140. What does the strip() method of a string do?
141. What does the split() method of a string do?
142. What does the join() method of a string do?
143. What does the replace() method of a string do?
144. How to check if a string starts with a specific prefix? (startswith() function)
145. How to check if a string ends with a specific suffix? (endswith() function)
146. How to find the position of a substring in a string? (find() or index() function)
147. What is the difference between find() and index() when the substring is not found?
148. What is string formatting in Python? Name 2 ways.
149. Example of an f-string (formatted string literal).
150. Example of the .format() method.

II. Intermediate Level (200 questions)

A. Error and Exception Handling (30 questions)
151. What are errors and exceptions in Python?
152. What is the difference between SyntaxError and Exception?
153. What is the try-except block used for in Python?
154. What is the basic syntax of try-except?
155. How to handle multiple types of exceptions?
156. When does a NameError exception occur?
157. When does a TypeError exception occur?
158. When does a ValueError exception occur?
159. When does an IndexError exception occur?
160. When does a KeyError exception occur?
161. When does a ZeroDivisionError exception occur?
162. When does a FileNotFoundError exception occur?
163. What is the else block used for in try-except-else?
164. What is the finally block used for in try-except-finally?
165. When is the finally block always executed?
166. How to raise a custom exception?
167. What is the assert keyword used for in Python?
168. When should you use assert instead of try-except?
169. What is the base class of all exceptions in Python?
170. How to access detailed information about an exception?
171. What is a stack trace?
172. How to log exceptions?
173. What is the purpose of logging?
174. What is the logging module in Python?
175. What are the basic logging levels?
176. How to configure a logger to write to a file?
177. What is a context manager?
178. What is the syntax of the with statement?
179. Example of using with open(...) to handle files.
180. Why is the with statement useful in exception and resource handling?

B. Modules and Packages (30 questions)
181. What is a module in Python?
182. Why should we use modules?
183. How to create a Python module?
184. How to import a module? (Example: import math)
185. How to import a specific object from a module? (Example: from math import pi)
186. What is the difference between import module_name and from module_name import function_name?
187. What is the as keyword used for in import? (Example: import numpy as np)
188. What does import * mean and why should it be avoided?
189. What is the __name__ variable in Python?
190. What does the code if __name__ == "__main__": do?
191. What is a package in Python?
192. What does the directory structure of a package look like?
193. What is the role of the __init__.py file in a package?
194. How to import a module from a sub-package?
195. What is PYTHONPATH?
196. How to add a directory to PYTHONPATH?
197. What are some common built-in modules in Python? Name 3 modules.
198. What is the os module used for? Name 2 functions.
199. What is the sys module used for? Name 2 functions.
200. What is the datetime module used for? Name 2 functions.
201. What is the json module used for?
202. What is the collections module used for?
203. What is the re module used for?
204. How to list all functions and variables in a module? (dir() function)
205. How to view documentation for a module or function? (help() function)
206. What is the concept of namespace in Python?
207. Distinguish between module, package, and library.
208. What is the directory structure of a typical Python project?
209. What are wheel files (.whl) in Python?
210. What is Poetry and why is it used?

C. Object-Oriented Programming (OOP) (50 questions)
211. What is object-oriented programming (OOP)?
212. What are the main pillars of OOP? Name 4 pillars.
213. What is a Class in Python?
214. What is an Object in Python?
215. What is the syntax for declaring a simple Class?
216. What is an attribute of an object?
217. What is a method of an object?
218. What is the __init__ constructor function used for in Python?
219. What does the self keyword mean in a class method?
220. How to create an object from a Class?
221. What is a class attribute?
222. What is an instance attribute?
223. What is a class method? (Decorator @classmethod)
224. What does the cls keyword mean in a class method?
225. What is a static method? (Decorator @staticmethod)
226. When should you use a class method, when should you use a static method?
227. What is inheritance in OOP?
228. What are parent and child classes?
229. What is the syntax for a class to inherit from another class?
230. What is the super() keyword used for in inheritance?
231. What is polymorphism in OOP?
232. Example of polymorphism in Python.
233. What is abstraction in OOP?
234. What is an interface in Python? (How to simulate)
235. What is encapsulation in OOP?
236. What are the access levels in Python? (Public, Protected, Private)
237. How to denote a "protected" attribute in Python? (Convention: _)
238. How to denote a "private" attribute in Python? (Convention: __)
239. What are getters and setters in OOP?
240. What is the @property decorator used for in Python?
241. Example of using @property to create a getter.
242. Example of using @property.setter to create a setter.
243. What is multilevel inheritance?
244. What is multiple inheritance?
245. What is the diamond problem in multiple inheritance?
246. What is Method Resolution Order (MRO)?
247. What are the issubclass() and isinstance() functions used for?
248. What are magic methods (dunder methods) in Python?
249. What is the purpose of __str__ and __repr__?
250. What is the difference between __str__ and __repr__?
251. What is the __len__ magic method used for?
252. What is the __add__ magic method used for?
253. What is the __call__ magic method used for?
254. What is a decorator?
255. How to create a simple decorator?
256. What is an iterator in Python?
257. What is an iterable in Python?
258. What methods are required by the iterator protocol in Python? (__iter__ and __next__)
259. What is a generator in Python?
260. What is the yield keyword used for in a generator?

D. File and Data Handling (40 questions)
261. What are the file opening modes in Python? (read, write, append, binary, text)
262. How to open a file for reading?
263. How to open a file for writing (overwrite)?
264. How to open a file for appending?
265. How to read the entire content of a file into a string?
266. How to read a file line by line?
267. How to write a string to a file?
268. How to write multiple lines to a file?
269. Why is it important to close a file?
270. Why should you use with open(...) when working with files?
271. What is CSV (Comma Separated Values)?
272. What is the csv module used for in Python?
273. How to read data from a CSV file?
274. How to write data to a CSV file?
275. What is JSON (JavaScript Object Notation)?
276. What is the json module used for in Python?
277. How to convert a Python object to a JSON string? (json.dumps())
278. How to convert a JSON string to a Python object? (json.loads())
279. How to write a Python object to a JSON file? (json.dump())
280. How to read a Python object from a JSON file? (json.load())
281. What is YAML (YAML Ain't Markup Language)?
282. How to handle YAML files in Python? (pyyaml library)
283. What is Pickle in Python?
284. When should you use Pickle?
285. How to serialize a Python object using Pickle? (pickle.dumps())
286. How to deserialize a Python object using Pickle? (pickle.loads())
287. What is the difference between JSON and Pickle?
288. What are the binary modes when opening a file? (e.g., rb, wb)
289. How to read/write binary data?
290. What is the os.path module used for?
291. How to check if a path is a file or a directory?
292. How to create a new directory?
293. How to delete a file?
294. How to list the contents of a directory?
295. How to rename a file or directory?
296. What are relative and absolute paths?
297. What is a pipe (|) in Linux/macOS?
298. What is redirect (>, >>) in Linux/macOS?
299. How to execute a shell command from Python? (subprocess module)
300. What is f.seek() used for in file handling?

E. Advanced Programming & Libraries (50 questions)
301. What is List Comprehension?
302. Example of List Comprehension to create a list of even numbers.
303. What is Dictionary Comprehension?
304. Example of Dictionary Comprehension.
305. What is Set Comprehension?
306. Example of Set Comprehension.
307. What is a Generator Expression?
308. What is the difference between List Comprehension and Generator Expression?
309. What is the @functools.wraps decorator used for?
310. What is the zip() function used for in Python?
311. What is the enumerate() function used for in Python?
312. What are the any() and all() functions used for in Python?
313. What is Collections Counter used for?
314. What is Collections defaultdict used for?
315. What is Collections namedtuple used for?
316. What is threading in Python?
317. What is a process in Python?
318. What is the difference between threading and multiprocessing?
319. What is GIL (Global Interpreter Lock) in Python?
320. How does GIL affect multithreading performance?
321. When should you use threading, when should you use multiprocessing?
322. What is thread safety?
323. What is a race condition?
324. What is a lock used for in threading?
325. What is concurrent.futures.ThreadPoolExecutor used for?
326. What is concurrent.futures.ProcessPoolExecutor used for?
327. What are regular expressions in Python?
328. What functions does the re module provide?
329. What does the . character mean in regex?
330. What does the * character mean in regex?
331. What does the + character mean in regex?
332. What does the ? character mean in regex?
333. What do [] characters mean in regex?
334. What do () characters mean in regex?
335. What is the re.search() function used for?
336. What is the re.match() function used for?
337. What is the re.findall() function used for?
338. What is the re.sub() function used for?
339. What is the NumPy library used for?
340. What is an array in NumPy?
341. What is the Pandas library used for?
342. What is a DataFrame in Pandas?
343. What is the Matplotlib library used for?
344. How to plot a line chart using Matplotlib?
345. What is the Requests library used for?
346. How to send an HTTP GET request using Requests?
347. How to send an HTTP POST request using Requests?
348. What is web scraping?
349. What is the BeautifulSoup library used for?
350. How to parse HTML using BeautifulSoup?

III. Advanced Level & Applications (150 questions)

A. Software Design & Architecture (40 questions)
351. What are the SOLID principles in programming?
352. Explain the Single Responsibility Principle (SRP).
353. Explain the Open/Closed Principle (OCP).
354. Explain the Liskov Substitution Principle (LSP).
355. Explain the Interface Segregation Principle (ISP).
356. Explain the Dependency Inversion Principle (DIP).
357. What are common design patterns in Python? Name 3 patterns.
358. What is the Singleton pattern? When should it be used?
359. What is the Factory Method pattern?
360. What is the Observer pattern?
361. What is MVC (Model-View-Controller) in web development?
362. What is a RESTful API?
363. What are the main HTTP verbs?
364. What is a state machine?
365. What is event-driven programming?
366. What is a callback function in Python?
367. What is asynchronous programming in Python?
368. What are the async and await keywords used for in Python?
369. What is the asyncio module in Python?
370. What is the difference between concurrent and parallel execution?
371. What is a generator coroutine?
372. What are the testing methods in Python? (Unit, Integration, End-to-end)
373. What is unit testing?
374. What is the unittest library used for in Python?
375. What is the pytest library used for in Python?
376. What is Test-Driven Development (TDD)?
377. What is Continuous Integration (CI)?
378. What is Continuous Deployment (CD)?
379. What is Docker and why is it important in Python application deployment?
380. What is the SQLAlchemy library used for?
381. What is ORM (Object-Relational Mapping)?
382. What is database migration?
383. What is caching in Python applications?
384. What is a CDN (Content Delivery Network)?
385. What is load balancing?
386. What is a message queue? (e.g., RabbitMQ, Kafka)
387. What is microservices architecture?
388. What is monolithic architecture?
389. What are the advantages and disadvantages of Microservices vs Monolithic?
390. What is containerization?

B. Advanced Libraries and Frameworks (50 questions)
391. What is Django?
392. What are the main components of Django? (Models, Views, Templates, URLs)
393. What is Flask?
394. What is the main difference between Django and Flask?
395. When should you choose Django, when should you choose Flask?
396. What is FastAPI? What are its advantages over Flask/Django?
397. What is the requests library used for in web development?
398. What is the celery library used for?
399. What is WebSocket?
400. How to handle WebSocket in Python? (websockets library)
401. What is PyTorch?
402. What is TensorFlow?
403. What is the main difference between PyTorch and TensorFlow?
404. What is Keras?
405. What is Scikit-learn?
406. What basic machine learning algorithms does Scikit-learn support?
407. What is NLTK (Natural Language Toolkit)?
408. What is SpaCy?
409. What is OpenCV?
410. What is Plotly?
411. What is Dash?
412. What is Streamlit?
413. What is Airflow?
414. What is Celery Beat?
415. What is Redis?
416. What is PostgreSQL?
417. What is MongoDB?
418. What is Docker Compose?
419. What is Kubernetes?
420. What is AWS Lambda?
421. What is Google Cloud Functions?
422. What is Azure Functions?
423. What are CI/CD pipelines?
424. What are GitHub Actions?
425. What is Jenkins?
426. What is Apache Spark?
427. What is Dask?
428. What is Apache Flink?
429. What is a Data Lake?
430. What is a Data Warehouse?
431. What is ETL (Extract, Transform, Load)?
432. What is data governance?
433. What is privacy-preserving AI?
434. What is Explainable AI (XAI)?
435. What is bias in AI?
436. What is MLOps?
437. What is model deployment?
438. What is model monitoring?
439. What is a feature store?
440. What is Reinforcement Learning?

C. Advanced Topics & Optimization (60 questions)
441. What are data structures and algorithms in Python?
442. What are time complexity and space complexity?
443. Explain Big O notation.
444. Example of binary search algorithm.
445. Example of bubble sort algorithm.
446. What is a Hash Table in Python? (Dictionary is an example)
447. What is collision resolution in Hash Table?
448. What is a tree data structure?
449. What is a graph data structure?
450. What is the Breadth-First Search (BFS) algorithm?
451. What is the Depth-First Search (DFS) algorithm?
452. What is Dynamic Programming?
453. What is a greedy algorithm?
454. What is a backtracking algorithm?
455. What is memoization?
456. How to optimize Python code?
457. What is profiling in Python? (cProfile module)
458. What is the dis module used for in Python?
459. What is a C Extension in Python?
460. What is Cython?
461. What is Numba?
462. What is PyPy?
463. What is a JIT compiler (Just-In-Time compiler)?
464. How does garbage collection work in Python?
465. What is reference counting?
466. What are cyclic references?
467. What are weak references in Python?
468. What is a metaclass in Python?
469. When should you use a metaclass?
470. What is a descriptor in Python?
471. What is monkey patching in Python?
472. When should you avoid monkey patching?
473. What are Abstract Base Classes (ABCs) in Python? (abc module)
474. What are type hints in Python?
475. What is the typing module used for in Python?
476. What are the benefits of using type hints?
477. What is MyPy?
478. What are unit test mock objects?
479. What is the unittest.mock library used for?
480. What is Dependency Injection (DI)?
481. What is IoC (Inversion of Control)?
482. What is the Click library used for?
483. What is the Typer library used for?
484. What is the Rich library used for?
485. What is the Pydantic library used for?
486. What is Black?
487. What is Flake8?
488. What is Ruff?
489. What are pre-commit hooks?
490. What is Semantic Versioning?
491. What is a PEP (Python Enhancement Proposal)?
492. What is PEP 8?
493. The importance of the Python community.
494. How to contribute to Python open source?
495. What is the Zen of Python?
496. What is tuple unpacking?
497. What is a context manager with @contextlib.contextmanager?
498. What is a coroutine?
499. What is the event loop in asyncio?
500. What is uvloop and why is it used?
